using System;
<<<<<<< HEAD
=======
using System.IO;
>>>>>>> origin/master
using System.ServiceModel.Activation;
using System.Web;
using System.Web.Routing;
using EsterServer.Model.Interfaces;
using EsterServer.Model.Ioc;
using EsterServer.Model.Services;
using EsterServer.Modules.AccessControl;
using EsterServer.Modules.Authentication;
using EsterServer.Modules.BacNetServer.Alarms;
using EsterServer.Modules.BacNetServer.Notifications;
using EsterServer.Modules.BacNetServer.Schedules;
using EsterServer.Modules.Dictionaries;
using EsterServer.Modules.Logs;
using EsterServer.Modules.People.ModuleFiles;
using EsterServer.Modules.Update;
using EsterServer.Modules.Users;
using EsterServer.Modules.BacNetServer;
using Microsoft.Practices.Unity;
using Nini.Config;


namespace EsterServer
{
    public class Global : HttpApplication
    {
        private readonly UnityContainer _container = IocContainer.Instance;
<<<<<<< HEAD
        //private ServiceHost _winAuthHost;

        void Application_Start(object sender, EventArgs e)
        {
            RegisterRoutes();
            _container.RegisterInstance(_container.Resolve<BacNetServer>());
=======
       
        void Application_Start(object sender, EventArgs e)
        {
            RegisterRoutes();

            _container.RegisterInstance(new BacNetServer(_container));
>>>>>>> origin/master

            var configSource = new XmlConfigSource(
                Path.Combine(HttpRuntime.AppDomainAppPath, @"Resources\ServerConfig.xml")) { AutoSave = true };

            string path = "";
            try
            {
                path = configSource.Configs["ActiveDirectory"].Get("Path");
            }
            catch {}
            
            _container.RegisterType<IPeopleWatcher,ActiveDirectoryPeopleWatcher>(
                new ContainerControlledLifetimeManager(),
                new InjectionConstructor(new object[]{path,"Администратор","6*!vb9%q2"}));
            
        }

        void Application_End(object sender, EventArgs e)
        {
<<<<<<< HEAD
            //_winAuthHost.Close();            
=======
            
            
>>>>>>> origin/master
        }

        private void RegisterRoutes()
        {
            RouteTable.Routes.Add(new GenericHandlerRoute<LogWsHandler>("logs/subscribe"));
            RouteTable.Routes.Add(new ServiceRoute("info", new WebServiceHostFactory(), typeof(ServerInfo)));
            RouteTable.Routes.Add(new ServiceRoute("login", new WebServiceHostFactory(), typeof(AuthenticationModule)));
            RouteTable.Routes.Add(new ServiceRoute("dictionaries", new WebServiceHostFactory(), typeof(DictionariesModule)));
            RouteTable.Routes.Add(new ServiceRoute("bacnet", new WebServiceHostFactory(), typeof(BacNetServer)));
            RouteTable.Routes.Add(new ServiceRoute("people", new WebServiceHostFactory(), typeof(PeopleModule)));
            RouteTable.Routes.Add(new ServiceRoute("guests", new WebServiceHostFactory(), typeof(GuestsModule)));
            RouteTable.Routes.Add(new ServiceRoute("logs", new WebServiceHostFactory(), typeof(LogModule)));
            RouteTable.Routes.Add(new ServiceRoute("updates", new WebServiceHostFactory(), typeof(UpdateModule)));
            RouteTable.Routes.Add(new ServiceRoute("doors", new WebServiceHostFactory(), typeof(DoorsModule)));

            RouteTable.Routes.Add(new ServiceRoute("GetErrors", new WebServiceHostFactory(), typeof(AlarmChecker)));
            RouteTable.Routes.Add(new ServiceRoute("notifications", new WebServiceHostFactory(), typeof(DataPusher)));
            RouteTable.Routes.Add(new ServiceRoute("templates", new WebServiceHostFactory(), typeof(TemplatesModule)));
            RouteTable.Routes.Add(new ServiceRoute("users", new WebServiceHostFactory(), typeof(UsersModule)));
            RouteTable.Routes.Add(new ServiceRoute("values", new WebServiceHostFactory(), typeof(ValuesPusher)));
            RouteTable.Routes.Add(new ServiceRoute("schedules", new WebServiceHostFactory(), typeof(SchedulesService)));
        }
    }
}
