using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
<<<<<<< HEAD
using System.Windows.Shapes;
using Ester.Model.Attributes;
=======
using Ester.Model.BaseClasses;
using Ester.Model.Data;
>>>>>>> master
using Ester.Model.Events;
using Ester.Model.Repositories;
using Ester.Model.Services;
using Ester.Model.Wrappers;
using Microsoft.Practices.Prism.Events;
using Microsoft.Practices.ServiceLocation;

namespace Ester.Model.PlanControls
{
    /// <summary>
    /// Interaction logic for DoorControl.xaml
    /// </summary>
    public partial class Door
    {
        private static readonly SolidColorBrush ClosedDoorColor = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));
        private static readonly SolidColorBrush OpenedDoorColor = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));
        private static readonly SolidColorBrush DefaultDoorColor = new SolidColorBrush(Color.FromRgb(0xFC, 0xFF, 0xF5));
        private static readonly SolidColorBrush PanicDoorColor = new SolidColorBrush(Color.FromRgb(0x33, 0x99, 0xCC));

        private static readonly SolidColorBrush DoorColor0 = new SolidColorBrush(Color.FromRgb(0xFF,0x00,0xFF));
        private static readonly SolidColorBrush DoorColor1 = new SolidColorBrush(Color.FromRgb(0xFF, 0x00, 0x00));
        private static readonly SolidColorBrush DoorColor2 = new SolidColorBrush(Color.FromRgb(0x00, 0xFF, 0x00));
        private static readonly SolidColorBrush DoorColor3 = new SolidColorBrush(Color.FromRgb(0x00, 0x00, 0xFF));
        private static readonly SolidColorBrush DoorColor4 = new SolidColorBrush(Color.FromRgb(0xFF, 0xFF, 0x00));


        public Door()
            : base()
        {
            InitializeComponent();
            try
            {
                EventAggregator = ServiceLocator.Current.GetInstance<IEventAggregator>();                
                //CurrentAccessModeProperty.OverrideMetadata
            }
            catch
            {
                return;
            }

            ValuesLongPull.ValuesChangedEvent += SetValues;
            //EventAggregator.GetEvent<SensorValueChangedEvent>().Subscribe(SetValues);
            NotificationsLongPull.NotificationRecivedEvent += OnNotificationReceived;
            EventAggregator.GetEvent<DoorAccessModesReceivedEvent>().Subscribe(DoorAccessModesReceivedEventHandler);
        }

        private string _doorMode;

        private void DoorAccessModesReceivedEventHandler(Dictionary<string, string> doorAccessModes)
        {            
            if (doorAccessModes.ContainsKey(Address))
            {
                _doorMode = doorAccessModes[Address];
                SetValues(new KeyValuePair<string, string>(Address, _doorMode));
            }
        }

        private async void OnNotificationReceived(string message)
        {
            var notify = message.Split(';');
            if (Address.Trim().Equals(notify[0].Trim(), StringComparison.InvariantCultureIgnoreCase))
            {
                StatusVisibility = Visibility.Visible;
                Status = notify[1];
                //DoorColor = PanicDoorColor;
                if (notify.Length == 3)
                {
                    if (notify[2].Contains("CU") && PeopleRepository.StaticPeopleList != null)
                    {
                        var person = PeopleRepository.StaticPeopleList.FirstOrDefault(s => s.Id.ToString() == notify[2].Remove(0,2));
                        if (person != null)
                            notify[2] = person.ToString();
                    }
                    StatusDetails = notify[2];
                }
                await Task.Delay(5000);
                StatusVisibility = Visibility.Collapsed;
                Status = "";
                //DoorColor = DefaultDoorColor;
                if (notify.Length == 3)
                    StatusDetails = "";
            }
        }

        static Door()
        {
            TitleProperty.OverrideMetadata(typeof(Door), new PropertyMetadata("", OnTitleChanged));
            DescriptionProperty.OverrideMetadata(typeof(Door), new PropertyMetadata("", OnDescriptionChanged));            
        }
        

        private static void OnDescriptionChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var sender = d as Door;
            if (sender == null) return;
            if (!sender.IsLoaded) return;

            if (!string.IsNullOrWhiteSpace(sender.Description))
                CommonRequests.PushObjectProperyToServer(new KeyValuePair<string, string>(sender.Id + "|Description", sender.Description));
                //sender.EventAggregator.GetEvent<PushObjectPropertyToServerEvent>().Publish(new KeyValuePair<string, string>(sender.Id + "|Description", sender.Description));
        }

        private static void OnTitleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var sender = d as Door;
            if (sender == null) return;
            if (!sender.IsLoaded) return;

            if (!string.IsNullOrWhiteSpace(sender.Title))
                CommonRequests.PushObjectProperyToServer(new KeyValuePair<string, string>(sender.Id + "|Title", sender.Title));
                //sender.EventAggregator.GetEvent<PushObjectPropertyToServerEvent>().Publish(new KeyValuePair<string, string>(sender.Id + "|Title", sender.Title));
        }

        private async void Demo()
        {            
            /*DoorMain.Background = ClosedDoorColor;            
            await Task.Delay(new Random().Next(3, 10) * 1000);
            DoorMain.Background = OpenedDoorColor;
            await Task.Delay(3000);
            Demo();*/
        }

        protected override void SetValues(KeyValuePair<string, string> sensor)
        {
            if (Address != sensor.Key)
                return;
            if (sensor.Value == "0")
                DoorColor = DoorColor0;
            if (sensor.Value == "1")
                DoorColor = DoorColor1;
            if (sensor.Value == "2")
                DoorColor = DoorColor2;
            if (sensor.Value == "3")
                DoorColor = DoorColor3;
            if (sensor.Value == "4")
                DoorColor = DoorColor4;
        }

        private static void OnDoorStateChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var sender = d as Door;

            if (sender == null)
                return;

            if (sender.IsOpened == true)
                sender.DoorColor = OpenedDoorColor;
            if (sender.IsOpened == false)
                sender.DoorColor = ClosedDoorColor;
        }

        

        private static void OnDoorAccessModeChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var sender = d as Door;
            if (sender == null) return;
            if (!sender.IsLoaded) return;

            CommonRequests.ChangeDoorAccessMode(new DoorAccessModeParameter() { Address = sender.Address, ModeId = ((int)sender.AccessMode).ToString(), ScheduleId = "0" });
        }

        public static readonly DependencyProperty RotationAngleProperty = DependencyProperty.Register(
    "RotationAngle", typeof(int), typeof(Door), new PropertyMetadata(0));

        public int RotationAngle
        {
            get { return (int)GetValue(RotationAngleProperty); }
            set { SetValue(RotationAngleProperty, value); }
        }

        public static readonly DependencyProperty ScaleProperty = DependencyProperty.Register(
    "Scale", typeof(double), typeof(Door), new PropertyMetadata((double)1));

        public double Scale
        {
            get { return (double)GetValue(ScaleProperty); }
            set { SetValue(ScaleProperty, value); }
        }

        public static readonly DependencyProperty StatusProperty = DependencyProperty.Register(
    "Status", typeof(string), typeof(Door), new PropertyMetadata(""));

        public string Status
        {
            get { return (string)GetValue(StatusProperty); }
            set { SetValue(StatusProperty, value); }
        }

        public static readonly DependencyProperty StatusDetailsProperty = DependencyProperty.Register(
"StatusDetails", typeof(string), typeof(Door), new PropertyMetadata(""));

        public string StatusDetails
        {
            get { return (string)GetValue(StatusDetailsProperty); }
            set { SetValue(StatusDetailsProperty, value); }
        }

        public static readonly DependencyProperty StatusVisibilityProperty = DependencyProperty.Register(
"StatusVisibility", typeof(Visibility), typeof(Door), new PropertyMetadata(Visibility.Collapsed));

        public Visibility StatusVisibility
        {
            get { return (Visibility)GetValue(StatusVisibilityProperty); }
            set { SetValue(StatusVisibilityProperty, value); }
        }

        private static readonly DependencyProperty IsOpenedProperty = DependencyProperty.Register(
    "IsOpened", typeof(bool?), typeof(Door), new PropertyMetadata(null, OnDoorStateChanged));

        private bool? IsOpened
        {
            get { return (bool?)GetValue(IsOpenedProperty); }
            set { SetValue(IsOpenedProperty, value); }
        }

        private static readonly DependencyProperty DoorColorProperty = DependencyProperty.Register(
    "DoorColor", typeof(SolidColorBrush), typeof(Door), new PropertyMetadata(DefaultDoorColor));

        private SolidColorBrush DoorColor
        {
            get { return (SolidColorBrush)GetValue(DoorColorProperty); }
            set { SetValue(DoorColorProperty, value); }
        }

        private void DoorMouseDown(object sender, MouseButtonEventArgs e)
        {
            _lastDragPoint = e.GetPosition(this);
        }

        private void DoorMouseUp(object sender, MouseButtonEventArgs e)
        {
            //var content = Content as Shape;
            //if (content == null) return;

            DoorSelectionChanging(e);

            //if (_currentMode == RoomMode.Normal)
            //    RoomSelectionChanging(e);
            //if (_currentMode == RoomMode.PersonEditing)
            //    PersonAccessChanging(e);
        }

        private void DoorSelectionChanging(MouseButtonEventArgs e)
        {
            if (e.ChangedButton == MouseButton.Left)
            {
                var newPoint = e.GetPosition(this);
                if (newPoint == _lastDragPoint)
                {
                    EventAggregator.GetEvent<ContextAddingEvent>().Publish(this);
                }
            }
            if (e.ChangedButton == MouseButton.Right)
            {
                EventAggregator.GetEvent<ContextRemovingEvent>().Publish(this);
            }
        }

        public static readonly DependencyProperty AccessModeProperty = DependencyProperty.Register(
    "AccessMode", typeof(AccessMode), typeof(Door), new PropertyMetadata(OnDoorAccessModeChanged));

        [AggregatedProperty]
        [CommonProperty]
        public AccessMode AccessMode
        {
            get { return (AccessMode)GetValue(AccessModeProperty); }
            set { SetValue(AccessModeProperty, value); }
        }

        private Point _lastDragPoint;
    }
}
